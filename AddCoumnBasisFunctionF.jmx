<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ColumBasis" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,2)}</stringProp>
        <longProp name="ThreadGroup.start_time">1514455293000</longProp>
        <longProp name="ThreadGroup.end_time">1514455293000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>
            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import org.openqa.selenium.firefox.FirefoxProfile;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import java.io.FileReader;&#xd;
import java.io.BufferedReader;&#xd;
import java.io.FileWriter;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import java.util.ArrayList;&#xd;
import java.util.List;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,60);&#xd;
&#xd;
f = new FileOutputStream(&quot;TimestampsFolder/AddcolumnTest.txt&quot;,true); &#xd;
p = new PrintStream(f); &#xd;
StartTime=LocalDateTime.now();&#xd;
Itration=${__BeanShell(vars.getIteration(),)};&#xd;
ThreadsU=${__threadNum};&#xd;
Itr=String.valueOf(Itration);&#xd;
User=String.valueOf(ThreadsU);&#xd;
WDS.log.info(&quot; StartTime = &quot;+StartTime);&#xd;
try{ &#xd;
//Launcing application&#xd;
WDS.browser.get(&quot;https://app.mammoth.io/#/login&quot;);&#xd;
WDS.sampleResult.sampleStart();&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;userEmail&quot;))).sendKeys(new String[] {&quot;deepak.merahkee@gmail.com&quot;});&#xd;
&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;userPwd&quot;))).sendKeys(new String[] {&quot;merahkee@123&quot;});&#xd;
&#xd;
login=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//button[@class=&apos;btn btn-mammoth&apos;]&quot;)));&#xd;
startlogin=LocalDateTime.now();&#xd;
login.click();&#xd;
&#xd;
TEN_SECONDS=13*1000;&#xd;
WDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;
oldTime=LocalDateTime.now();&#xd;
start=LocalDateTime.now();&#xd;
try{&#xd;
while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
&#xd;
WDS.log.info(&quot;overlay is there&quot;);	&#xd;
Long minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;
if(minutesBetween&gt;TEN_SECONDS){&#xd;
WDS.browser.navigate().refresh();&#xd;
oldTimeAfterRefresh=LocalDateTime.now();&#xd;
//again find overlay after refreshing&#xd;
try{&#xd;
while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
Long minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;
if(minutesBetween&gt;TEN_SECONDS){&#xd;
break outerloop;&#xd;
}&#xd;
else {&#xd;
WDS.log.info(&quot;Overlay is there&quot;);&#xd;
}&#xd;
}&#xd;
}&#xd;
catch(Exception e){&#xd;
	WDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);	&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Overlay = &quot;+Timestamp);&#xd;
	p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Overlay = &quot;+Timestamp);&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: login = &quot;+Timestamp);&#xd;
	p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: login = &quot;+Timestamp);&#xd;
//Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;
}&#xd;
}&#xd;
}&#xd;
WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Overlay = &quot;+Timestamp);&#xd;
	p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Overlay = &quot;+Timestamp);&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: login = &quot;+Timestamp);&#xd;
	p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: login = &quot;+Timestamp);&#xd;
}&#xd;
catch(Exception e){&#xd;
	WDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Overlay = &quot;+Timestamp);&#xd;
	p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Overlay = &quot;+Timestamp);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: login = &quot;+Timestamp);&#xd;
	p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: login = &quot;+Timestamp);&#xd;
	break outerloop;&#xd;
	}&#xd;
}catch(Exception e)&#xd;
{&#xd;
WDS.log.info(&quot;Page is not loaded after 5 misns&quot;);&#xd;
}&#xd;
&#xd;
WDS.sampleResult.sampleEnd();&#xd;
p.close();&#xd;
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import java.io.FileReader;&#xd;
import java.io.BufferedReader;&#xd;
import java.io.FileWriter;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import java.util.ArrayList;&#xd;
import org.testng.asserts.SoftAssert;&#xd;
import java.util.List;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,60);&#xd;
WDS.sampleResult.sampleStart();&#xd;
Itration=${__BeanShell(vars.getIteration(),)};&#xd;
ThreadsU=${__threadNum};&#xd;
Itr=String.valueOf(Itration);&#xd;
User=String.valueOf(ThreadsU);&#xd;
&#xd;
try{&#xd;
try{&#xd;
   //Checking for the invisibility of blanck page if there are no data in the application&#xd;
wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;
}catch(Exception e){&#xd;
    //If There is no data in the application uploading a new file.&#xd;
if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//ul[@class=&apos;menu-main&apos;]/child::li&quot;))).click();&#xd;
start=LocalDateTime.now();&#xd;
Thread.sleep(5000);&#xd;
file1= WDS.browser.findElement(By.xpath(&quot;//input[contains(@class,&apos;fileSelectHiddenInput&apos;)]&quot;));&#xd;
&#xd;
WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;
//filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;
filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;CSVoffice_main.csv&quot;;&#xd;
WDS.log.info(filelocation);&#xd;
file1.sendKeys(new String[] {filelocation});&#xd;
}&#xd;
}&#xd;
}catch(Exception e)  &#xd;
{  &#xd;
    //Exception if there is problem in file upload.&#xd;
WDS.log.info(&quot;No loginupload&quot;);&#xd;
}&#xd;
&#xd;
&#xd;
WDS.log.info(&quot;Completed&quot;);&#xd;
WDS.sampleResult.sampleEnd();&#xd;
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import org.openqa.selenium.JavascriptExecutor;&#xd;
import org.openqa.selenium.interactions.Action;&#xd;
import org.openqa.selenium.interactions.Actions;&#xd;
import java.io;&#xd;
import java.io.File;&#xd;
import java.awt.datatransfer.StringSelection;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import java.io.FileReader;&#xd;
import java.io.BufferedReader;&#xd;
import java.io.FileWriter;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import java.util.ArrayList;&#xd;
import java.util.List;&#xd;
import java.nio.file.Path;&#xd;
import java.nio.file.Paths;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,60);&#xd;
WDS.sampleResult.sampleStart();&#xd;
Itration=${__BeanShell(vars.getIteration(),)};&#xd;
ThreadsU=${__threadNum};&#xd;
Itr=String.valueOf(Itration);&#xd;
User=String.valueOf(ThreadsU);&#xd;
&#xd;
f = new FileOutputStream(&quot;TimestampsFolder/AddcolumnTest.txt&quot;,true); &#xd;
p = new PrintStream(f); &#xd;
&#xd;
TEN_SECONDS=13*1000;&#xd;
&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//ul[@class=&apos;menu-main&apos;]/child::li&quot;))).click();&#xd;
&#xd;
&#xd;
start=LocalDateTime.now();&#xd;
String currDir  = System.getProperty(&quot;user.dir&quot;);&#xd;
File file =new File(currDir);&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//p[@class=&apos;btn btn-outline&apos;]&quot;)));&#xd;
Thread.sleep(4000);&#xd;
file1= WDS.browser.findElement(By.xpath(&quot;//input[contains(@class,&apos;fileSelectHiddenInput&apos;)]&quot;));&#xd;
//WDS.log.info(file);&#xd;
WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;
//Path pathToFile = Paths.get(new String[] {&quot;C://Users//Deepak&quot;},new String[] {&quot;test_suites&quot;},new String[] {&quot;Result&quot;},new String[] {&quot;Add_data_test.xls&quot;});&#xd;
filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/ColumnFunctionFile.csv&quot;;&#xd;
//filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;ColumnFunctionFile.csv&quot;;&#xd;
WDS.log.info(filelocation);&#xd;
start=LocalDateTime.now();&#xd;
oldTimeForProgress=LocalDateTime.now();&#xd;
file1.sendKeys(new String[] {filelocation});&#xd;
start=LocalDateTime.now();&#xd;
WebDriverWait wait2= new WebDriverWait(WDS.browser,300);&#xd;
oldTimeForProgress=LocalDateTime.now();&#xd;
start=LocalDateTime.now();&#xd;
try{&#xd;
wait2.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;progress progress-mini&apos;]&quot;)));&#xd;
WDS.log.info(&quot;--------------------------------Progress bar gets invisible now-------------------&quot;);&#xd;
&#xd;
end=LocalDateTime.now();&#xd;
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
String Timestamp = Long.toString(minutesBetween);&#xd;
WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Fileupload = &quot;+Timestamp);&#xd;
p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: Fileupload = &quot;+Timestamp);&#xd;
&#xd;
}&#xd;
catch(Exception e)&#xd;
{&#xd;
WDS.log.info(&quot;---------------Looking like file got stuck in processing messages----------------&quot;);&#xd;
&#xd;
end=LocalDateTime.now();&#xd;
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
String Timestamp = Long.toString(minutesBetween);&#xd;
WDS.log.info(&quot;Login: Fileupload = file is not uploaded: &quot;+Timestamp+&quot; miliseconds&quot;);&#xd;
}&#xd;
&#xd;
try{&#xd;
Actions action = new Actions(WDS.browser);&#xd;
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//h5//span[@class=&apos;ng-binding&apos;]&quot;))).click();&#xd;
action.moveToElement(wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//h5//span[contains(.,&apos;Columnfunctionfile&apos;)]&quot;)))).doubleClick().perform();&#xd;
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div/div[@class=&apos;btn btn-open ng-scope&apos;]&quot;))).click();&#xd;
winHandleBefore = WDS.browser.getWindowHandle();&#xd;
for(String winHandle : WDS.browser.getWindowHandles()){&#xd;
if(!winHandle.equals(winHandleBefore)){&#xd;
WDS.browser.switchTo().window(winHandle);&#xd;
}&#xd;
}&#xd;
}&#xd;
catch(Exception e)&#xd;
{&#xd;
WDS.log.info(&quot;Did not go to new window&quot;);&#xd;
}&#xd;
&#xd;
try{&#xd;
    oldTime=LocalDateTime.now();&#xd;
start=LocalDateTime.now();&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)));&#xd;
while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
&#xd;
WDS.log.info(&quot;overlay is there&quot;);	&#xd;
Long minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;
if(minutesBetween&gt;TEN_SECONDS){&#xd;
WDS.browser.navigate().refresh();&#xd;
oldTimeAfterRefresh=LocalDateTime.now();&#xd;
//again find overlay after refreshing&#xd;
try{&#xd;
while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
Long minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;
if(minutesBetween&gt;TEN_SECONDS){&#xd;
break outerloop;&#xd;
}&#xd;
else {&#xd;
WDS.log.info(&quot;Overlay is there&quot;);&#xd;
}&#xd;
}&#xd;
}&#xd;
catch(Exception e){&#xd;
	WDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);	&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: NewWindow = &quot;+Timestamp);&#xd;
    p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: NewWindow = &quot;+Timestamp);&#xd;
	p.close();&#xd;
//Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;
}&#xd;
}&#xd;
}&#xd;
WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;
end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: NewWindow = &quot;+Timestamp);&#xd;
}catch(Exception e){&#xd;
	WDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	String Timestamp = Long.toString(minutesBetween);&#xd;
	WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: NewWindow = &quot;+Timestamp);&#xd;
    p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: NewWindow = &quot;+Timestamp);&#xd;
	break outerloop;&#xd;
	p.close();&#xd;
	}&#xd;
&#xd;
&#xd;
WDS.sampleResult.sampleEnd();&#xd;
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;
import org.openqa.selenium;
import org.openqa.selenium.support.ui.Select;
import java.awt.Robot;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.List;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
WebDriverWait wait= new WebDriverWait(WDS.browser,60);
Itration=${__BeanShell(vars.getIteration(),)};
ThreadsU=${__threadNum};
Itr=String.valueOf(Itration);
User=String.valueOf(ThreadsU);

f = new FileOutputStream(&quot;TimestampsFolder/AddcolumnTest.txt&quot;,true); 
p = new PrintStream(f); 

wait.until(ExpectedConditions.titleContains(&quot;View&quot;));
WDS.log.info(&quot;waited for view&quot;);
WDS.sampleResult.sampleStart();
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;)));
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;))).click();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//a[text()=&apos;Add&apos;]&quot;))).click();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[@class=&apos;head&apos;]/div[@class=&apos;controls&apos;]/a[@class=&apos;close-x text-hide&apos;]&quot;))).click();
WDS.log.info(&quot;---Add Column  window closed successfully-----&quot;);
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;)));
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;))).click();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//a[text()=&apos;Add&apos;]&quot;))).click();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[@class=&apos;btn btn-default cancel&apos;]&quot;))).click();
WDS.log.info(&quot;---Add Column Operation canceled successfully-----&quot;);
WDS.log.info(&quot;---------Add Column pipeline test started----------&quot;);
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;)));
//wait.until(ExpectedConditions.visibilityof(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;))).click();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//label[contains(@class,&apos;task-button&apos;)][contains(text(),&apos;ADD TASK&apos;)]&quot;))).click();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//a[text()=&apos;Add&apos;]&quot;))).click();

wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//input[contains(@class,&apos;add-column&apos;) and @type=&apos;text&apos;]&quot;))).click();
WDS.browser.findElement(By.xpath(&quot;//input[contains(@class,&apos;add-column&apos;) and @type=&apos;text&apos;]&quot;)).sendKeys(new String[] {&quot;TextTypeColumn&quot;});

selectType =new Select(WDS.browser.findElement(By.xpath(&quot;//div[contains(@class,&apos;inputs function-newcol&apos;)]//div[@class=&apos;styled-select&apos;]/select&quot;)));
defaultType  =selectType.getFirstSelectedOption();
defaultDatatype =defaultType.getText().toString();
WDS.log.info(defaultDatatype);

wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[@class=&apos;btn btn-mammoth light apply-function&apos;]&quot;))).click();
startlogin=LocalDateTime.now();
wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//label[contains(@class,&apos;steps-exist&apos;)]&quot;))).click();

addedColDetail =WDS.browser.findElement(By.xpath(&quot;//h5[text()=&apos;1. Add Columns&apos;]/following-sibling::p&quot;));

addColDetails =addedColDetail.getText().toString();
end=LocalDateTime.now();
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);
	String Timestamp = Long.toString(minutesBetween);
WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: ColumnAdded = &quot;+Timestamp);
p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: ColumnAdded = &quot;+Timestamp);
WDS.log.info(&quot;Added columns are  :  &quot;  +addColDetails);

stepsInPipeline=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;steps-panel dv-panel&apos;]/div[@class=&apos;status-bar&apos;]/p[1]&quot;)));
totalStepsApplied =stepsInPipeline.getText().toString();

WDS.log.info(&quot;end  :&quot;+ totalStepsApplied);

try{
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;dropdown-toggle&apos;]/p&quot;))).click();

logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//a[@class=&apos;logout&apos;]&quot;)));
start=LocalDateTime.now();
logout.click();
wait.until(ExpectedConditions.titleContains(&quot;Login&quot;));
end=LocalDateTime.now();
Long minutesBetween=ChronoUnit.MILLIS.between(start,end);
String Timestamp = Long.toString(minutesBetween);
WDS.log.info(&quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: logout = &quot;+Timestamp);
p.println( &quot;Login: itrNO = &quot;+Itr+&quot;i: user = &quot;+User+&quot;u: logout = &quot;+Timestamp);
p.close();
}
catch(Exception e)
{
WDS.log.info(&quot;Login: logout = Not logged out&quot;);
}
EndTime=LocalDateTime.now();
WDS.log.info(&quot;Timing: EndTime = &quot;+EndTime);

WDS.sampleResult.sampleEnd();




</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
